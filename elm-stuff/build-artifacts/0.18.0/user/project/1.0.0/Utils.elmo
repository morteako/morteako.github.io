var _user$project$Utils$listPadRight = F3(
	function (nr, val, xs) {
		return A2(
			_elm_lang$core$Basics_ops['++'],
			xs,
			A2(
				_elm_lang$core$List$repeat,
				nr - _elm_lang$core$List$length(xs),
				val));
	});
var _user$project$Utils$maybeFuncWithDefault = F3(
	function (f, $default, x) {
		return A2(
			_elm_lang$core$Maybe$withDefault,
			$default,
			f(x));
	});
var _user$project$Utils$tuple3ToList = function (_p0) {
	var _p1 = _p0;
	return {
		ctor: '::',
		_0: _p1._0,
		_1: {
			ctor: '::',
			_0: _p1._1,
			_1: {
				ctor: '::',
				_0: _p1._2,
				_1: {ctor: '[]'}
			}
		}
	};
};
var _user$project$Utils$tupleMap3 = F2(
	function (f, _p2) {
		var _p3 = _p2;
		return {
			ctor: '_Tuple3',
			_0: f(_p3._0),
			_1: f(_p3._1),
			_2: f(_p3._2)
		};
	});
var _user$project$Utils$safeAverage = function (nrs) {
	var _p4 = nrs;
	if (_p4.ctor === '[]') {
		return _elm_lang$core$Maybe$Nothing;
	} else {
		return _elm_lang$core$Maybe$Just(
			_elm_lang$core$List$sum(nrs) / _elm_lang$core$Basics$toFloat(
				_elm_lang$core$List$length(nrs)));
	}
};
var _user$project$Utils$average = function (nrs) {
	return _elm_lang$core$List$sum(nrs) / _elm_lang$core$Basics$toFloat(
		_elm_lang$core$List$length(nrs));
};
var _user$project$Utils$map2Full = F5(
	function (f2, fx, fy, xs, ys) {
		var _p5 = {ctor: '_Tuple2', _0: xs, _1: ys};
		if (_p5._0.ctor === '[]') {
			return A2(_elm_lang$core$List$map, fy, ys);
		} else {
			if (_p5._1.ctor === '[]') {
				return A2(_elm_lang$core$List$map, fx, xs);
			} else {
				return {
					ctor: '::',
					_0: A2(f2, _p5._0._0, _p5._1._0),
					_1: A5(_user$project$Utils$map2Full, f2, fx, fy, _p5._0._1, _p5._1._1)
				};
			}
		}
	});
var _user$project$Utils$map2FullId = F3(
	function (f2, xs, ys) {
		return A5(_user$project$Utils$map2Full, f2, _elm_lang$core$Basics$identity, _elm_lang$core$Basics$identity, xs, ys);
	});
var _user$project$Utils$getNumberOfZeroes = function (rounding) {
	var _p6 = rounding;
	switch (_p6.ctor) {
		case 'ZeroDecimal':
			return 0;
		case 'OneDecimal':
			return 1;
		default:
			return 2;
	}
};
var _user$project$Utils$getRoundingFactor = function (rounding) {
	var _p7 = rounding;
	switch (_p7.ctor) {
		case 'ZeroDecimal':
			return 1.0;
		case 'OneDecimal':
			return 10.0;
		default:
			return 100.0;
	}
};
var _user$project$Utils$roundToDec = F3(
	function (lim, roundingType, number) {
		return _elm_lang$core$Basics$toString(
			function (x) {
				return x / _user$project$Utils$getRoundingFactor(roundingType);
			}(
				_elm_lang$core$Basics$toFloat(
					function () {
						var _p8 = lim;
						if (_p8.ctor === 'Round') {
							return _elm_lang$core$Basics$round;
						} else {
							return _elm_lang$core$Basics$floor;
						}
					}()(
						A2(
							F2(
								function (x, y) {
									return x * y;
								}),
							_user$project$Utils$getRoundingFactor(roundingType),
							number)))));
	});
var _user$project$Utils$unlines = function (ss) {
	return A2(_elm_lang$core$String$join, '\n', ss);
};
var _user$project$Utils$lines = function (ss) {
	return A2(_elm_lang$core$String$split, '\n', ss);
};
var _user$project$Utils$resultFoldr = F3(
	function (f, v, results) {
		return A3(
			_elm_lang$core$List$foldr,
			F2(
				function (x, y) {
					var _p9 = {ctor: '_Tuple2', _0: x, _1: y};
					if (_p9._0.ctor === 'Ok') {
						if (_p9._1.ctor === 'Ok') {
							return A2(f, _p9._1._0, _p9._0._0);
						} else {
							return _elm_lang$core$Result$Err(_p9._1._0);
						}
					} else {
						return _elm_lang$core$Result$Err(_p9._0._0);
					}
				}),
			v,
			results);
	});
var _user$project$Utils$resultMap = F2(
	function (f, xs) {
		var iter = F2(
			function (acc, curXs) {
				iter:
				while (true) {
					var _p10 = curXs;
					if (_p10.ctor === '[]') {
						return _elm_lang$core$Result$Ok(acc);
					} else {
						var _p11 = f(_p10._0);
						if (_p11.ctor === 'Err') {
							return _elm_lang$core$Result$Err(_p11._0);
						} else {
							var _v10 = {ctor: '::', _0: _p11._0, _1: acc},
								_v11 = _p10._1;
							acc = _v10;
							curXs = _v11;
							continue iter;
						}
					}
				}
			});
		var res = A2(
			iter,
			{ctor: '[]'},
			xs);
		var _p12 = res;
		if (_p12.ctor === 'Err') {
			return _elm_lang$core$Result$Err(_p12._0);
		} else {
			return _elm_lang$core$Result$Ok(
				_elm_lang$core$List$reverse(_p12._0));
		}
	});
var _user$project$Utils$accumulate = F6(
	function (op, pred, term, next, v, $default) {
		return pred(
			term(v)) ? $default : A2(
			op,
			term(v),
			A6(
				_user$project$Utils$accumulate,
				op,
				pred,
				term,
				next,
				next(v),
				$default));
	});
var _user$project$Utils$untilScan = F4(
	function (pred, next, f, v) {
		var _p13 = pred(v);
		if (_p13 === false) {
			return {
				ctor: '::',
				_0: f(v),
				_1: A4(
					_user$project$Utils$untilScan,
					pred,
					next,
					f,
					next(v))
			};
		} else {
			return {ctor: '[]'};
		}
	});
var _user$project$Utils$addMaybe = F2(
	function (x, y) {
		var _p14 = {ctor: '_Tuple2', _0: x, _1: y};
		if (_p14._0.ctor === 'Nothing') {
			return _elm_lang$core$Maybe$Nothing;
		} else {
			if (_p14._1.ctor === 'Nothing') {
				return _elm_lang$core$Maybe$Nothing;
			} else {
				return _elm_lang$core$Maybe$Just(_p14._0._0 + _p14._1._0);
			}
		}
	});
var _user$project$Utils$findIndex = F2(
	function (pred, xs) {
		var index = A3(
			_elm_lang$core$List$foldr,
			F2(
				function (x, y) {
					return pred(x) ? _elm_lang$core$Maybe$Just(0) : A2(
						_user$project$Utils$addMaybe,
						_elm_lang$core$Maybe$Just(1),
						y);
				}),
			_elm_lang$core$Maybe$Nothing,
			xs);
		return index;
	});
var _user$project$Utils$uncurryFlip = function (_p15) {
	return _elm_lang$core$Basics$uncurry(
		_elm_lang$core$Basics$flip(_p15));
};
var _user$project$Utils$replaceRegexWith = F3(
	function (pat, replPat, str) {
		return A4(
			_elm_lang$core$Regex$replace,
			_elm_lang$core$Regex$All,
			_elm_lang$core$Regex$regex(pat),
			function (_p16) {
				return replPat;
			},
			str);
	});
var _user$project$Utils$zip = F2(
	function (xs, ys) {
		var _p17 = {ctor: '_Tuple2', _0: xs, _1: ys};
		if (_p17._0.ctor === '[]') {
			return {ctor: '[]'};
		} else {
			if (_p17._1.ctor === '[]') {
				return {ctor: '[]'};
			} else {
				return {
					ctor: '::',
					_0: {ctor: '_Tuple2', _0: _p17._0._0, _1: _p17._1._0},
					_1: A2(_user$project$Utils$zip, _p17._0._1, _p17._1._1)
				};
			}
		}
	});
var _user$project$Utils$combine = function (xs) {
	return A2(
		_user$project$Utils$zip,
		xs,
		A2(
			_elm_lang$core$Maybe$withDefault,
			{ctor: '[]'},
			_elm_lang$core$List$tail(xs)));
};
var _user$project$Utils$dotProduct = F2(
	function (xs, ys) {
		return A3(
			_elm_lang$core$List$foldr,
			F2(
				function (x, y) {
					return A2(
						_elm_lang$core$Basics$uncurry,
						F2(
							function (x, y) {
								return x * y;
							}),
						x) + y;
				}),
			0.0,
			A2(_user$project$Utils$zip, xs, ys));
	});
var _user$project$Utils$countFreq = F2(
	function (a, xs) {
		return A3(
			_elm_lang$core$List$foldr,
			F2(
				function (x, y) {
					return _elm_lang$core$Native_Utils.eq(x, a) ? (1 + y) : y;
				}),
			0,
			xs);
	});
var _user$project$Utils$replaceChar = F3(
	function (a, b, xs) {
		return A2(
			_elm_lang$core$String$map,
			function (x) {
				return _elm_lang$core$Native_Utils.eq(a, x) ? b : x;
			},
			xs);
	});
